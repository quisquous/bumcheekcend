import <telescope.ash>

void printPlan(CombatPlan plan) {
    print("Plan: " + plan.loc + ", " + plan.thing, "purple");
    print("Turns: " + plan.turns);
    print("Noncombat: " + plan.useNonCombat);
    print("Fax: " + plan.options.useFax);
    print("Olfact: " + plan.options.useOlfaction);
    print("Ray: " + plan.options.useYellowRay);
    foreach mob in plan.targets {
        print("Mob: " + mob);
    }
}

void testPlan() {
    int[item] needed;
    needed[$item[torpedo]] = 1;
    needed[$item[spiky hair gel]] = 1;
    needed[$item[metallic a]] = 1;
    needed[$item[lowercase n]] = 1;
    needed[$item[black pepper]] = 1;
    needed[$item[tamarind-flavored chewing gum]] = 1;
    needed[$item[adder bladder]] = 1;
    needed[$item[gremlin juice]] = 1;
    needed[$item[marzipan skull]] = 1;
    needed[$item[plot hole]] = 1;

    // FIXME: Test if 0 olfactions work.
    CombatPlan[int] plans = makePlan(needed, true, true, 3);

    foreach key in plans {
        printPlan(plans[key]);
    }
}

boolean onlyNonCombatDrop(location loc, item thing) {
    return count(getMonstersForItem(loc, thing)) == 0;
}

void sanityCheck() {
    boolean verifyItem(item thing) {
        if (obtainInfo contains thing)
            return true;
        if (!(multipartItems contains thing))
            return false;

        foreach subItem in multipartItems[thing] {
            if (!verifyItem(subItem))
                return false;
        }

        return true;
    }

    foreach str in telescopeText {
        item thing = telescopeText[str];
        if (!verifyItem(thing))
            abort("No information about how to obtain " + thing);
    }

    foreach e in gateItems {
        item needed;
        boolean obtainInfoExists = false;
        foreach thing in gateItems[e] {
            if (obtainInfo contains thing)
                needed = thing;
        }
        if (needed == $item[none])
            abort("No way to get any item for effect " + e);
    }

    foreach thing in obtainInfo {
        location loc = obtainInfo[thing].loc;
        if (loc == $location[none])
            continue;

        if (!(bcascStage contains loc))
            abort("No bcascStage for " + loc);

        if (obtainInfo[thing].nonCombat) {
            if (!(numberOfNonCombats contains loc))
                abort("No noncombat info for " + loc);
        }

        boolean[monster] droppers = getMonstersForItem(loc, thing);
        if (count(droppers) == 0) {
            if (!obtainInfo[thing].nonCombat)
                abort("Couldn't find any monsters for " + thing + " in " + loc);
        }

        foreach mob in droppers {
            float itemDrop = chanceForItemPerEncounter(mob, thing, 0);
            if (itemDrop <= 0)
                abort("No chance of getting " + thing + " from " + mob);
        }

        // Sanity check a single plan generated by options
        void check(CombatOptions options, CombatPlan plan, string desc, location loc, item thing) {
            string suffix = " (" + desc + ", item: " + thing + ", loc: " + loc + ")";
            void checkMonster(monster mob) {
                boolean[monster] mobs = getMonstersForItem(loc, thing);
                if (!(mobs contains mob))
                    abort("Bad mob: " + mob + suffix);
            }

            if (plan.turns <= 0)
                abort("Bad turns: " + plan.turns + suffix);

            if (plan.loc != loc)
                abort("Bad loc: " + plan.loc + suffix);

            if (plan.thing != thing)
                abort("Bad item : " + plan.thing + suffix);

            foreach mob in plan.targets {
                checkMonster(mob);
            }

            if (!onlyNonCombatDrop(plan.loc, plan.thing)) {
                if (plan.options.useFax) {
                    if (count(plan.targets) != 1)
                        abort("Expected 1 target, got " + (count(plan.targets)) + suffix);
                }

                if (count(plan.targets) == 0)
                    abort("Expected non-zero targets" + suffix);
            }

            if (plan.options.useYellowRay != options.useYellowRay)
                abort("Bad option: useYellowRay." + suffix);
            if (plan.options.useOlfaction != options.useOlfaction)
                abort("Bad option: useOlfaction." + suffix);
            if (plan.options.useFax != options.useFax)
                abort("Bad option: useFax." + suffix);
            if (plan.options.alreadyOlfacting != options.alreadyOlfacting)
                abort("Bad option: alreadyOlfacting" + suffix);
            if (count(plan.options.items) != count(options.items))
                abort("Bad option: item count" + suffix);
            foreach optItem in options.items {
                if (!(plan.options.items contains optItem))
                    abort("Missing item option: " + optItem + suffix);
            }
        }

        // Run through trying to get the item using a variety of methods.
        // Make sure there's a sane number of turns to get each one.
        // Additionally, olfacting should never be slower than not,
        // and using a yellow ray should always be faster than olfacting.
        // Faxing should always be faster than not-faxing.

        CombatOptions baseOptions;
        CombatPlan baseTurns = turnsToGetItem(loc, thing, baseOptions);
        check(baseOptions, baseTurns, "base", loc, thing);

        CombatOptions olfactOptions;
        olfactOptions.useOlfaction = true;
        CombatPlan olfactTurns = turnsToGetItem(loc, thing, olfactOptions);
        check(olfactOptions, olfactTurns, "olfact", loc, thing);

        CombatOptions yellowRayOptions;
        yellowRayOptions.useYellowRay = true;
        CombatPlan yellowRayTurns = turnsToGetItem(loc, thing, yellowRayOptions);
        check(yellowRayOptions, yellowRayTurns, "yellowRay", loc, thing);

        CombatOptions baseFaxOptions;
        baseFaxOptions.useFax = true;
        CombatPlan baseFaxTurns = turnsToGetItem(loc, thing, baseFaxOptions);
        check(baseFaxOptions, baseFaxTurns, "baseFax", loc, thing);

        CombatOptions olfactFaxOptions;
        olfactFaxOptions.useOlfaction = true;
        olfactFaxOptions.useFax = true;
        CombatPlan olfactFaxTurns = turnsToGetItem(loc, thing, olfactFaxOptions);
        check(olfactFaxOptions, olfactFaxTurns, "olfactFax", loc, thing);

        CombatOptions yellowRayFaxOptions;
        yellowRayFaxOptions.useYellowRay = true;
        yellowRayFaxOptions.useFax = true;
        CombatPlan yellowRayFaxTurns = turnsToGetItem(loc, thing, yellowRayFaxOptions);
        check(yellowRayFaxOptions, yellowRayFaxTurns, "yellowRayFax", loc, thing);

        CombatOptions yellowRayOlfactFaxOptions;
        yellowRayOlfactFaxOptions.useYellowRay = true;
        yellowRayOlfactFaxOptions.useFax = true;
        yellowRayOlfactFaxOptions.useOlfaction = true;
        CombatPlan yellowRayOlfactFaxTurns = turnsToGetItem(loc, thing, yellowRayOlfactFaxOptions);
        check(yellowRayOlfactFaxOptions, yellowRayOlfactFaxTurns, "yellowRayOlfactFax", loc, thing);

        print("Item info for " + thing + " [" + loc + "]", "purple");
        print("Base turns: " + baseTurns.turns);
        print("Base fax turns: " + baseFaxTurns.turns);
        print("Olfact turns: " + olfactTurns.turns);
        print("Olfact fax turns: " + olfactFaxTurns.turns);
        print("Yellow ray turns: " + yellowRayTurns.turns);
        print("Yellow ray fax turns: " + yellowRayFaxTurns.turns);
        print("Yellow ray olfact fax turns: " + yellowRayOlfactFaxTurns.turns);

        void compare(item thing, location loc, string strSlow, float slow, string strFast, float fast) {
            float epsilon = 0.001;

            if (fast - epsilon < slow)
                return;

            abort(strFast + " slower than " + strSlow + " for " + thing + " from " + loc);
        }

        compare(thing, loc, "base", baseTurns.turns, "olfact", olfactTurns.turns);

        if (!locContainsIndirectDropper(loc, thing))
            compare(thing, loc, "olfact", olfactTurns.turns, "yellowRay", yellowRayTurns.turns);
        compare(thing, loc, "base", baseTurns.turns, "baseFax", baseFaxTurns.turns);
        compare(thing, loc, "olfact", olfactTurns.turns, "olfactFax", olfactFaxTurns.turns);
        compare(thing, loc, "yellowRay", yellowRayTurns.turns, "yellowRayFax", yellowRayFaxTurns.turns);

        compare(thing, loc, "olfactFax", olfactFaxTurns.turns, "yellowRayOlfactFax", yellowRayOlfactFaxTurns.turns);
        compare(thing, loc, "yellowRayFax", yellowRayFaxTurns.turns, "yellowRayOlfactFax", yellowRayOlfactFaxTurns.turns);
    }

    foreach thing in otherLairItems {
        if (!verifyItem(thing))
            abort("No information about how to obtain " + thing);
    }

    for level from 1 to telescopeUpgrades() {
        // This will abort for unknown strings.
        item thing = telescopeItemAtLevel(level);

        if (!verifyItem(thing))
            abort("Unknown telescope item: " + thing);
    }
}

void main() {
    sanityCheck();
}
